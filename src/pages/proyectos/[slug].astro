---
import Layout from '../../layouts/Layout.astro'; // Uso un Layout para la estructura base

export async function getStaticPaths() {

const allProjects = [
  {
    slug: "api-todo-list",
    title: "API REST de Lista de Tareas (To-Do List)",
    githubLink: "https://github.com/TiagoV69/To-do-list.git",
    content: `
      <p>API REST completamente funcional desarrollada con Spring Boot y Java para gestionar una lista de tareas pendientes mediante operaciones CRUD.</p>
      <h2>üéØ Objetivo del Proyecto</h2>
      <p>Demostrar la comprensi√≥n y aplicaci√≥n de conceptos fundamentales en el desarrollo backend moderno usando el ecosistema Spring.</p>
      <h2>üöÄ Caracter√≠sticas Principales</h2>
      <ul>
        <li>Crear una nueva tarea (POST /api/tasks).</li>
        <li>Listar todas las tareas (GET /api/tasks).</li>
        <li>Obtener una tarea por ID (GET /api/tasks/{id}).</li>
        <li>Actualizar y eliminar tareas existentes.</li>
      </ul>
      <h2>üõ†Ô∏è Tecnolog√≠as y Herramientas</h2>
      <ul>
        <li>Lenguaje: Java 17</li>
        <li>Framework: Spring Boot 3 (Spring Web, Spring Data JPA)</li>
        <li>Base de Datos: H2 (en memoria)</li>
        <li>Gestor de Dependencias: Maven</li>
      </ul>
    `
  },
  {
    slug: "ecommerce-spring",
    title: "E-commerce Robusto con Spring Security",
    githubLink: "https://github.com/TiagoV69/Shop.git",
    content: `
      <p>Plataforma de e-commerce robusta, con autenticaci√≥n segura, gesti√≥n de productos y pedidos, y documentaci√≥n de API.</p>
      <h2>üéØ Objetivo del Proyecto</h2>
      <p>Implementar un sistema de comercio electr√≥nico con seguridad a nivel de API, autorizaci√≥n por roles y l√≥gica de negocio transaccional.</p>
      <h2>üöÄ Caracter√≠sticas Principales</h2>
      <ul>
        <li>Registro y login con Spring Security y JWT.</li>
        <li>Gesti√≥n de productos con autorizaci√≥n basada en roles (solo ADMIN edita).</li>
        <li>Procesamiento de pedidos con validaci√≥n de stock y c√°lculo de totales.</li>
        <li>Documentaci√≥n autom√°tica con OpenAPI (Swagger).</li>
      </ul>
      <h2>üõ†Ô∏è Tecnolog√≠as y Herramientas</h2>
      <ul>
        <li>Framework: Spring Boot (Security, JPA, Web)</li>
        <li>Tokens: JSON Web Tokens (JWT)</li>
        <li>Base de Datos: MySQL</li>
        <li>Documentaci√≥n: SpringDoc OpenAPI</li>
      </ul>
    `
  },
  {
    slug: "url-shortener",
    title: "Microservicio Acortador de URLs",
    githubLink: "https://github.com/TiagoV69/URLs-Shortener.git",
    content: `
      <p>Microservicio de alto rendimiento para acortar URLs largas en enlaces cortos y √∫nicos, con validaci√≥n y documentaci√≥n integrada.</p>
      <h2>üéØ Objetivo del Proyecto</h2>
      <p>Demostrar arquitectura de microservicios, dise√±o de API RESTful y buenas pr√°cticas de manejo de errores.</p>
      <h2>üöÄ Caracter√≠sticas Principales</h2>
      <ul>
        <li>Acortamiento de URLs v√≠a endpoint POST.</li>
        <li>Redirecci√≥n autom√°tica mediante c√≥digo corto.</li>
        <li>Validaci√≥n de URLs con respuestas de error apropiadas.</li>
        <li>Manejo centralizado de excepciones con @ControllerAdvice.</li>
        <li>Documentaci√≥n interactiva con Swagger.</li>
      </ul>
      <h2>üõ†Ô∏è Tecnolog√≠as y Herramientas</h2>
      <ul>
        <li>Framework: Spring Boot 3 (Web, Data JPA, Validation)</li>
        <li>Base de Datos: H2</li>
        <li>Utilidades: Lombok, SpringDoc OpenAPI</li>
      </ul>
    `
  },
  {
    slug: "finance-tracker-api",
    title: "API para Gestor de Finanzas Personales",
    githubLink: "https://github.com/TiagoV69/Personal-Finance-Tracker.git",
    content: `
      <p>API RESTful segura y dockerizada para la gesti√≥n de finanzas personales, con autenticaci√≥n JWT y operaciones financieras personalizadas.</p>
      <h2>üéØ Objetivo del Proyecto</h2>
      <p>Crear una API escalable y segura para manejar transacciones financieras por usuario, con un entorno de desarrollo moderno.</p>
      <h2>üöÄ Caracter√≠sticas Principales</h2>
      <ul>
        <li>Registro y login con hashing BCrypt y JWT.</li>
        <li>Modelo de datos para categor√≠as y transacciones.</li>
        <li>Entorno dockerizado con PostgreSQL y Docker Compose.</li>
      </ul>
      <h2>üõ†Ô∏è Tecnolog√≠as y Herramientas</h2>
      <ul>
        <li>Backend: Java 17, Spring Boot 3, Spring Security, JWT</li>
        <li>Base de Datos: PostgreSQL</li>
        <li>DevOps: Docker, Docker Compose, Maven</li>
      </ul>
    `
  }
];

  // Esta funci√≥n le dice a Astro qu√© p√°ginas construir.
  return allProjects.map(project => ({
    params: { slug: project.slug }, // Define la URL (ej: /proyectos/api-todo-list)
    props: project // Pasa todos los datos del proyecto a la p√°gina
  }));
}

// Astro.props ahora contiene los datos del proyecto espec√≠fico para esta p√°gina.
const { title, content, githubLink } = Astro.props;
---

<Layout title={title}>
  <main class="project-detail">
    <a href="/#projects-section" class="back-link">&larr; Volver a Proyectos</a>
    <h1>{title}</h1>
    <a href={githubLink} target="_blank" rel="noopener noreferrer" class="github-button">Ver C√≥digo en GitHub</a>
    
    <!-- Usamos set:html para renderizar el contenido HTML que definimos arriba -->
    <div class="content" set:html={content} />
  </main>
</Layout>

<style>
  .project-detail {
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
  }
  .back-link {
    display: inline-block;
    margin-bottom: 2rem;
    text-decoration: none;
    color: #0077b5;
  }
  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }
  .github-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background-color: #333;
    color: white;
    text-decoration: none;
    border-radius: 8px;
    margin-bottom: 2rem;
  }
  .content h2 {
    font-size: 1.8rem;
    margin-top: 2.5rem;
    border-bottom: 2px solid #eee;
    padding-bottom: 0.5rem;
  }
  .content ul {
    list-style-type: disc;
    padding-left: 20px;
  }
  .content li {
    margin-bottom: 0.5rem;
    line-height: 1.6;
  }
</style>