---
import Layout from '../../layouts/Layout.astro'; // Uso un Layout para la estructura base

export async function getStaticPaths() {

  const allProjects = [
    {
      slug: "api-todo-list",
      title: "API REST de Lista de Tareas (To-Do List)",
      githubLink: "https://github.com/TiagoV69/To-do-list.git",
      content: `
        <p>Este proyecto es una API REST completamente funcional desarrollada con Spring Boot y Java. Su prop√≥sito es gestionar una lista de tareas pendientes (To-Do List) a trav√©s de endpoints que soportan las operaciones CRUD (Crear, Leer, Actualizar y Eliminar).</p>
        <p>Como mi primer proyecto utilizando el ecosistema de Spring, su objetivo principal es demostrar la comprensi√≥n y aplicaci√≥n de los conceptos fundamentales del desarrollo de aplicaciones backend modernas.</p>
        <h2>üöÄ Caracter√≠sticas Principales</h2>
        <ul>
          <li>Crear una nueva tarea (POST /api/tasks).</li>
          <li>Obtener la lista completa de todas las tareas (GET /api/tasks).</li>
          <li>Obtener una tarea espec√≠fica por su ID (GET /api/tasks/{id}).</li>
          <li>Actualizar y eliminar tareas.</li>
        </ul>
        <h2>üõ†Ô∏è Tecnolog√≠as y Herramientas</h2>
        <ul>
          <li>Lenguaje: Java 17</li>
          <li>Framework: Spring Boot 3 (Spring Web, Spring Data JPA)</li>
          <li>Base de Datos: H2 Database (en memoria)</li>
          <li>Gestor de Dependencias: Maven</li>
        </ul>
      `
    },
    {
      slug: "ecommerce-spring",
      title: "E-commerce Robusto con Spring Security",
      githubLink: "https://github.com/TiagoV69/Shop.git",
      content: `
        <p>Un proyecto de e-commerce robusto y profesional, enfocado en la seguridad y la l√≥gica de negocio real. Cubre desde la configuraci√≥n inicial hasta la documentaci√≥n.</p>
        <h2>‚ú® Hitos del Proyecto</h2>
        <ul>
            <li><strong>M√≥dulo de Seguridad y Usuarios:</strong> Implementaci√≥n de registro y login con Spring Security y JWT para proteger la API.</li>
            <li><strong>M√≥dulo de Productos:</strong> CRUD completo para productos con autorizaci√≥n basada en roles (solo ADMIN puede modificar).</li>
            <li><strong>M√≥dulo de Pedidos:</strong> L√≥gica de negocio transaccional (@Transactional) para validar stock, calcular totales y asegurar la integridad de los datos.</li>
            <li><strong>Documentaci√≥n:</strong> Generaci√≥n autom√°tica de documentaci√≥n interactiva con OpenAPI (Swagger).</li>
        </ul>
        <h2>üõ†Ô∏è Tecnolog√≠as y Herramientas</h2>
        <ul>
            <li>Framework: Spring Boot (Security, JPA, Web)</li>
            <li>Tokens: JSON Web Tokens (JWT)</li>
            <li>Base de Datos: MySQL</li>
            <li>Documentaci√≥n: SpringDoc OpenAPI</li>
        </ul>
      `
    },
    {
      slug: "url-shortener",
      title: "Microservicio Acortador de URLs",
      githubLink: "https://github.com/TiagoV69/URLs-Shortener.git",
      content: `
        <p>Microservicio de alto rendimiento dise√±ado para cumplir una √∫nica responsabilidad: tomar una URL larga y generar un enlace corto y √∫nico. Es una demostraci√≥n de arquitectura de microservicios, dise√±o de API RESTful y c√≥digo resiliente.</p>
        <h2>‚ú® Caracter√≠sticas Principales</h2>
        <ul>
            <li><strong>API REST para Acortamiento:</strong> Endpoint POST para crear enlaces cortos.</li>
            <li><strong>Redirecci√≥n Autom√°tica:</strong> Endpoint GET /{shortCode} que redirige a la URL original.</li>
            <li><strong>Validaci√≥n Profesional:</strong> Rechaza URLs inv√°lidas con errores 400 Bad Request.</li>
            <li><strong>Manejo de Excepciones Centralizado:</strong> Uso de @ControllerAdvice para errores consistentes (ej: 404 Not Found).</li>
            <li><strong>Documentaci√≥n Interactiva (Swagger):</strong> API completamente documentada y probable desde el navegador.</li>
        </ul>
        <h2>üõ†Ô∏è Tecnolog√≠as y Herramientas</h2>
        <ul>
            <li>Framework: Spring Boot 3 (Web, Data JPA, Validation)</li>
            <li>Base de Datos: H2 Database</li>
            <li>Utilidades: Lombok, SpringDoc OpenAPI</li>
        </ul>
      `
    },
    {
      slug: "finance-tracker-api",
      title: "API para Gestor de Finanzas Personales",
      githubLink: "https://github.com/TiagoV69/Personal-Finance-Tracker.git",
      content: `
        <p>Una API RESTful robusta y segura para una aplicaci√≥n de gesti√≥n de finanzas personales, con un fuerte enfoque en la seguridad, la escalabilidad y un entorno de desarrollo moderno y "dockerizado".</p>
        <h2>‚ú® Caracter√≠sticas Principales</h2>
        <ul>
            <li><strong>M√≥dulo de Seguridad Completo:</strong> Registro, login con hashing BCrypt y autenticaci√≥n stateless con JWT.</li>
            <li><strong>M√≥dulo de Gesti√≥n Financiera:</strong> Modelo de datos para categor√≠as y transacciones asociadas a cada usuario.</li>
            <li><strong>Entorno Dockerizado:</strong> Usa Docker & Docker Compose para un entorno de desarrollo reproducible y aislado, incluyendo la base de datos PostgreSQL.</li>
        </ul>
        <h2>üõ†Ô∏è Pila Tecnol√≥gica</h2>
        <ul>
            <li>Backend: Java 17, Spring Boot 3, Spring Security, JWT</li>
            <li>Base de Datos: PostgreSQL (gestionada con Docker)</li>
            <li>DevOps: Docker, Docker Compose, Maven</li>
        </ul>
      `
    }
  ];

  // Esta funci√≥n le dice a Astro qu√© p√°ginas construir.
  return allProjects.map(project => ({
    params: { slug: project.slug }, // Define la URL (ej: /proyectos/api-todo-list)
    props: project // Pasa todos los datos del proyecto a la p√°gina
  }));
}

// Astro.props ahora contiene los datos del proyecto espec√≠fico para esta p√°gina.
const { title, content, githubLink } = Astro.props;
---

<Layout title={title}>
  <main class="project-detail">
    <a href="/#projects-section" class="back-link">&larr; Volver a Proyectos</a>
    <h1>{title}</h1>
    <a href={githubLink} target="_blank" rel="noopener noreferrer" class="github-button">Ver C√≥digo en GitHub</a>
    
    <!-- Usamos set:html para renderizar el contenido HTML que definimos arriba -->
    <div class="content" set:html={content} />
  </main>
</Layout>

<style>
  .project-detail {
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem;
  }
  .back-link {
    display: inline-block;
    margin-bottom: 2rem;
    text-decoration: none;
    color: #0077b5;
  }
  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }
  .github-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background-color: #333;
    color: white;
    text-decoration: none;
    border-radius: 8px;
    margin-bottom: 2rem;
  }
  .content h2 {
    font-size: 1.8rem;
    margin-top: 2.5rem;
    border-bottom: 2px solid #eee;
    padding-bottom: 0.5rem;
  }
  .content ul {
    list-style-type: disc;
    padding-left: 20px;
  }
  .content li {
    margin-bottom: 0.5rem;
    line-height: 1.6;
  }
</style>